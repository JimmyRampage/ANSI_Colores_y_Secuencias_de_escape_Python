print("\033c") # Limpia la terminal

RESET = '\x1b[0m'

"""
* Codes 0-15: These are the same colors you already know from the 3-4 bit range, including the bright colors.
* Codes 16-231: These are a grid of colors based on combinations of red, green, and blue. They are generated by combining values of the three primary colors on a scale from 0 to 5.
* Codes 232-255: These represent a grayscale, ranging from black to white in 24 different levels.
"""

# All 8-bit colors
def all_8bit_colors(show='all'):
    """
    Displays 8-bit color codes in the terminal.
    Args:
        show (str, optional): Specifies which color range to display. Defaults to 'all'.
            - 'all': Displays all 256 8-bit colors.
            - '3bit': Displays the first 8 standard 3-bit colors.
            - '4bit': Displays the first 16 standard 4-bit colors, including bright variations.
            - 'colors': Displays colors from index 16 to 231, which are a grid of colors based on red, green, and blue combinations.
            - 'gray': Displays grayscale colors from index 232 to 255, ranging from black to white in 24 levels.
    Returns:
        None
    """
    ranges = {
        'all': (0, 256),
        '3bit':(0,8),
        '4bit': (0, 16),
        'colors': (16, 232),
        'gray': (232,256)
    }
    if show not in ranges:
        return print(f'---> \x1b[1;4;31;40m{show=} NO ES UN PARÁMETRO VALIDO{RESET} ---> \x1b[1;4;32;40mVALIDOS: {(" | ").join(list(ranges.keys()))}')
    else:
        rng = ranges[show]
        for i in range(*rng):
            end_line = f'{RESET}\n' if (i <= 15 and i % 8 == 7) or ((i > 15) and (i -16) % 6 == 5) else ''
            print(f'\x1b[38;5;{i}m{str(i).center(4)}',end=end_line)

# All 8-bit bg-colors
def all_8bit_bg_colors(show='all'):
    """
    Displays 8-bit background color codes in the terminal.
    Args:
        show (str, optional): Specifies which color range to display. Defaults to 'all'.
            - 'all': Displays all 256 8-bit colors.
            - '3bit': Displays the first 8 standard 3-bit colors.
            - '4bit': Displays the first 16 standard 4-bit colors, including bright variations.
            - 'colors': Displays colors from index 16 to 231, which are a grid of colors based on red, green, and blue combinations.
            - 'gray': Displays grayscale colors from index 232 to 255, ranging from black to white in 24 levels.
    Returns:
        None
    """
    ranges = {
        'all': (0, 256),
        '3bit':(0,8),
        '4bit': (0, 16),
        'colors': (16, 232),
        'gray': (232,256)
    }
    if show not in ranges:
        return print(f'---> \x1b[1;4;31;40m{show=} NO ES UN PARÁMETRO VALIDO{RESET} ---> \x1b[1;4;32;40mVALIDOS: {(" | ").join(list(ranges.keys()))}')
    else:
        rng = ranges[show]
        for i in range(*rng):
            end_line = f'{RESET}\n' if (i <= 15 and i % 8 == 7) or ((i > 15) and (i -16) % 6 == 5) else ''
            print(f'\x1b[48;5;{i}m{str(i).center(4)}',end=end_line)


if __name__ == '__main__':

    all_8bit_colors(show='4bit')
    #all_8bit_bg_colors(show='4bit')